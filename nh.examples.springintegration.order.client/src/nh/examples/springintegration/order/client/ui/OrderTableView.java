package nh.examples.springintegration.order.client.ui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

import nh.examples.springintegration.order.queries.OrderDto;
import nh.virgo.order.queries.DummyOrders;

/**
 * 
 * @author nils
 */
public class OrderTableView extends javax.swing.JFrame {

	/** Creates new form OrderClient */
	public OrderTableView() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		orderviewTable = new javax.swing.JTable();
		refreshButton = new javax.swing.JButton();
		newOrderButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		_popupMenu = new JPopupMenu();
		addPopup(orderviewTable, _popupMenu);

		_viewLineItemsMenuItem = new JMenuItem("View Line Items...");
		_viewLineItemsMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				LineItemView v = new LineItemView(OrderTableView.this);
				v.setVisible(true);

			}
		});
		_popupMenu.add(_viewLineItemsMenuItem);

		orderviewTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] {

				}, new String[] { "Order Id", "Customer", "Items" }) {
			Class[] types = new Class[] { java.lang.String.class,
					java.lang.String.class, java.lang.Integer.class };
			boolean[] canEdit = new boolean[] { false, true, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jScrollPane1.setViewportView(orderviewTable);
		orderviewTable
				.getColumnModel()
				.getSelectionModel()
				.setSelectionMode(
						javax.swing.ListSelectionModel.SINGLE_SELECTION);
		orderviewTable.getColumnModel().getColumn(0).setResizable(false);
		orderviewTable.getColumnModel().getColumn(2).setResizable(false);

		refreshButton.setText("Refresh");
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});

		newOrderButton.setText("New Order...");
		newOrderButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newOrderButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														380, Short.MAX_VALUE)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		newOrderButton)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		212,
																		Short.MAX_VALUE)
																.addComponent(
																		refreshButton)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										229, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(refreshButton)
												.addComponent(newOrderButton))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void newOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				OrderTableView orderTableView = new OrderTableView();
				orderTableView.setTitle("All Orders");
				orderTableView.setVisible(true);
				List<OrderDto> dummyOrders = DummyOrders.dummyOrders();
				for (OrderDto order : dummyOrders) {
					orderTableView.addOrder(order);
				}
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton newOrderButton;
	private javax.swing.JTable orderviewTable;
	private javax.swing.JButton refreshButton;
	private JPopupMenu _popupMenu;
	private JMenuItem _viewLineItemsMenuItem;

	// End of variables declaration

	private DefaultTableModel getTableModel() {
		return (DefaultTableModel) orderviewTable.getModel();
	}

	private void addOrder(OrderDto order) {
		getTableModel().addRow(
				new Object[] { order.getOrderId(), order.getCustomerName(),
						order.getListItems().size() });
	}

	private static void addPopup(Component component, final JPopupMenu popup) {
		component.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}

			public void mouseReleased(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}

			private void showMenu(MouseEvent e) {
				popup.show(e.getComponent(), e.getX(), e.getY());
			}
		});
	}
}
